# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2017-02-02 13:46
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import fabric.models.models_nodes
import fabric.models.models_storage
import fabric.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('user_management', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DomainSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting', models.CharField(default=b'DomainSetting', max_length=255)),
                ('data', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'fabric_setting',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NTPSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting', models.CharField(default=b'NTPSetting', max_length=255)),
                ('data', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'fabric_setting',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ResolverSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting', models.CharField(default=b'ResolverSetting', max_length=255)),
                ('data', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'fabric_setting',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CEPHCluster',
            fields=[
                ('name', models.CharField(help_text=b'A local identifier for the cluster', max_length=255, primary_key=True, serialize=False)),
                ('cephx', models.BooleanField(help_text=b'Whether the cluster uses CEPHx')),
                ('uuid', models.UUIDField(default=fabric.models.models_storage.generate_uuid, help_text=b'A generated UUID used by libvirt')),
                ('fsid', models.UUIDField(help_text=b'The fsid of the cluster')),
                ('mon_host', models.GenericIPAddressField(help_text=b'The monitor config host of the cluster')),
                ('status', models.CharField(choices=[(b'disconnected', b'disconnected'), (b'connecting', b'connecting'), (b'connected', b'connected'), (b'error', b'error')], default=b'disconnected', help_text=b'The connection status of the cluster (disconnected/connecting/connected/error)', max_length=127)),
                ('username', models.CharField(help_text=b'The username to use when Kamaji is authenticating against the cluster', max_length=255)),
                ('password', models.CharField(help_text=b'The password to use when Kamaji is authenticating against the cluster', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CEPHClusterPool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pool', models.CharField(help_text=b'The CEPH cluster pool identifier', max_length=255)),
                ('type', models.CharField(choices=[(b'volume', b'volume'), (b'image', b'image'), (b'meta', b'meta')], help_text=b'The type of data to store in this pool (volume/image/meta). Only one pool  per type is allowed.', max_length=127, unique=True)),
                ('cluster', models.ForeignKey(help_text=b'The CEPH cluster to tie this pool to', on_delete=django.db.models.deletion.CASCADE, related_name='pools', to='fabric.CEPHCluster')),
            ],
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[(b'mariadb_powerdns', b'mariadb_powerdns'), (b'mariadb_keystone', b'mariadb_keystone'), (b'mariadb_neutron', b'mariadb_neutron'), (b'mariadb_kamaji', b'mariadb_kamaji'), (b'mariadb_cinder', b'mariadb_cinder'), (b'mariadb_glance', b'mariadb_glance'), (b'mariadb_nova', b'mariadb_nova'), (b'openstack_neutron', b'openstack_neutron'), (b'openstack_admin', b'openstack_admin'), (b'openstack_cinder', b'openstack_cinder'), (b'openstack_glance', b'openstack_glance'), (b'openstack_swift', b'openstack_swift'), (b'openstack_nova', b'openstack_nova'), (b'openstack_metadata_secret', b'openstack_metadata_secret'), (b'openstack_admin_token', b'openstack_admin_token'), (b'powerdns_api_key', b'powerdns_api_key'), (b'rabbitmq_celery', b'rabbitmq_celery'), (b'rabbitmq_openstack', b'rabbitmq_openstack')], max_length=250)),
                ('password', models.CharField(max_length=250)),
                ('username', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(choices=[(b'boot01', b'boot01'), (b'boot02', b'boot02'), (b'db01', b'db01'), (b'db02', b'db02'), (b'lb01', b'lb01'), (b'lb02', b'lb02'), (b'mq01', b'mq01'), (b'mq02', b'mq02'), (b'ns01', b'ns01'), (b'ns02', b'ns02'), (b'osc01', b'osc01'), (b'osc02', b'osc02'), (b'osn01', b'osn01'), (b'osn02', b'osn02'), (b'service_node01', b'service_node01'), (b'service_node02', b'service_node02'), (b'web01', b'web01'), (b'web02', b'web02'), (b'vip', b'vip')], max_length=50)),
                ('ip_address', models.GenericIPAddressField(protocol=b'IPv4', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PhysicalNetwork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True,
                                        serialize=False, verbose_name='ID')),
                ('name', models.CharField(
                    help_text=b'The human readable name of this physical network',
                    max_length=50, unique=True)),
                ('subnet', models.GenericIPAddressField(
                    help_text=b'The subnet address of this physical network.',
                    protocol=b'IPv4', unique=True)),
                ('prefix', models.IntegerField(
                    help_text=b'The subnet prefix of the physical network')),
                ('gateway', models.GenericIPAddressField(
                    help_text=b'The gateway address of this physical network',
                    protocol=b'IPv4', unique=True)),
                ('range_start', models.GenericIPAddressField(blank=True,
                                                             help_text=b'The first address in this physical network range',
                                                             null=True,
                                                             protocol=b'IPv4',
                                                             unique=True)),
                ('range_end', models.GenericIPAddressField(blank=True,
                                                           help_text=b'The last address in this physical network range',
                                                           null=True,
                                                           protocol=b'IPv4',
                                                           unique=True)),
                ('type', models.CharField(
                    choices=[(b'controller_network', b'controller_network'),
                             (b'compute_network', b'compute_network')],
                    default=b'compute_network',
                    help_text=b'The type of this network.', max_length=20,
                    validators=[
                        fabric.validators.validate_single_controller_network])),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('hostname', models.CharField(help_text=b'Name of this node', max_length=100, null=True, unique=True)),
                ('ip_address', models.GenericIPAddressField(help_text=b'The allocated IP address of this node', protocol=b'IPv4', unique=True)),
                ('mac_address', models.CharField(help_text=b'The MAC address of this node', max_length=20, primary_key=True, serialize=False)),
                ('last_seen', models.DateTimeField(auto_now_add=True, help_text=b'The date and time when this node was last seen')),
                ('active', models.BooleanField(default=True, help_text=b'True if node is active else false')),
                ('node_type', models.CharField(choices=[(b'unconfigured', b'unconfigured'), (b'compute', b'compute')], default=b'unconfigured', help_text=b'The type of this node', max_length=20)),
                ('revision', models.IntegerField(default=1, help_text=b'Current revision')),
                ('state', models.CharField(choices=[(b'CREATED', b'CREATED'), (b'FAILED', b'FAILED'), (b'PENDING', b'PENDING')], help_text=b'Current state of this node', max_length=20, null=True)),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fabric.PhysicalNetwork')),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting', models.CharField(max_length=255)),
                ('data', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SSHKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[(b'kamaji_ssh_key', b'kamaji_ssh_key')], max_length=250)),
                ('key', models.CharField(max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='ZoneLimitSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting', models.CharField(default=b'ZoneLimitSetting', max_length=255)),
                ('data', models.IntegerField()),
            ],
            options={
                'db_table': 'fabric_setting',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openstack_id', models.CharField(blank=True, max_length=40, unique=True)),
                ('url', models.CharField(blank=True, default=b'', max_length=250)),
                ('kamaji_services_compatible', models.BooleanField(default=False, help_text=b'Marks this image as compatible with Kamaji services.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImagePlaceholder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text=b'Name of the image', max_length=250)),
                ('disk_format', models.CharField(choices=[(b'raw', b'raw'), (b'vhd', b'vhd'), (b'vmdk', b'vmdk'), (b'vdi', b'vdi'), (b'iso', b'iso'), (b'qcow2', b'qcow2'), (b'aki', b'aki'), (b'ari', b'ari'), (b'ami', b'ami')], help_text=b'The disk format of the underlying disk image', max_length=10)),
                ('container_format', models.CharField(choices=[(b'bare', b'bare'), (b'ovf', b'ovf'), (b'aki', b'aki'), (b'ari', b'ari'), (b'ami', b'ami'), (b'ova', b'ova')], help_text=b'The container format in which the image also contains metadata about the actual virtual machine', max_length=10)),
                ('visibility', models.CharField(choices=[(b'public', b'public'), (b'private', b'private')], help_text=b'If the image show to all users or just the project', max_length=20)),
                ('protected', models.BooleanField(help_text=b'Whether the image should be protected from deletion or not')),
                ('url', models.CharField(help_text=b'The url of a file to use as image.', max_length=250)),
                ('kamaji_services_compatible', models.BooleanField(default=False, help_text=b'Marks this image as compatible with Kamaji services.')),
            ],
        ),
        migrations.CreateModel(
            name='Controller',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text=b'Name of this node', max_length=100, unique=True)),
                ('primary', models.BooleanField(default=False, help_text=b'Indicates if this controller is primary in environment')),
                ('hostname', models.CharField(help_text=b'Name of this node', max_length=100, unique=True)),
                ('ip_address', models.GenericIPAddressField(help_text=b'The allocated IP address of this node', protocol=b'IPv4', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='HardwareInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inventory', models.TextField(help_text=b'Contains the Hardware inventory in Json format')),
            ],
        ),
        migrations.AddField(
            model_name='controller',
            name='hardware_inventory',
            field=models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='fabric.HardwareInventory'),
        ),
        migrations.AddField(
            model_name='node',
            name='hardware_inventory',
            field=models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='fabric.HardwareInventory'),
        ),
        migrations.AlterField(
            model_name='node',
            name='network',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fabric.PhysicalNetwork'),
        ),
        migrations.RemoveField(
            model_name='controller',
            name='hostname',
        ),
        migrations.AddField(
            model_name='controller',
            name='status',
            field=models.CharField(choices=[(b'single', b'single'), (b'ready_to_join_cluster', b'ready_to_join_cluster'), (b'clustered', b'clustered')], default=b'ready_to_join_cluster', help_text=b'The status of this controller.', max_length=25),
        ),
        migrations.CreateModel(
            name='Instance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openstack_id', models.CharField(blank=True, max_length=40, unique=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_management.Project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Compute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openstack_id', models.CharField(blank=True, max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RenameField(
            model_name='node',
            old_name='last_seen',
            new_name='last_boot',
        ),
        migrations.RemoveField(
            model_name='node',
            name='hostname',
        ),
        migrations.AddField(
            model_name='node',
            name='index',
            field=models.IntegerField(default=fabric.models.models_nodes.get_node_index, help_text=b'The index of this node', unique=True),
        ),
        migrations.CreateModel(
            name='ControllerHostMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='host_map', to='fabric.Controller')),
                ('host', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='controller_map', to='fabric.Host')),
            ],
        ),
        migrations.AddField(
            model_name='host',
            name='index',
            field=models.IntegerField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name='host',
            name='type',
            field=models.CharField(max_length=50),
        ),
        migrations.RemoveField(
            model_name='host',
            name='hostname',
        ),
        migrations.AlterUniqueTogether(
            name='host',
            unique_together=set([('type', 'index')]),
        ),
        migrations.AlterModelOptions(
            name='host',
            options={'ordering': ['index']},
        ),
        migrations.AlterField(
            model_name='node',
            name='state',
            field=models.CharField(choices=[(b'READY', b'READY'), (b'FAILED', b'FAILED'), (b'CONVERTING', b'CONVERTING')], default=b'READY', help_text=b'Current state of this node', max_length=20, null=True),
        ),
        migrations.CreateModel(
            name='LoadBalancer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openstack_id', models.CharField(max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OverlaySubnet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openstack_id', models.CharField(blank=True, max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='loadbalancer',
            name='vip_subnet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='fabric.OverlaySubnet'),
        ),
        migrations.AlterField(
            model_name='loadbalancer',
            name='openstack_id',
            field=models.CharField(blank=True, max_length=40, unique=True),
        ),
        migrations.CreateModel(
            name='Flavor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openstack_id', models.CharField(blank=True, max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='instance',
            name='flavor',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='fabric.Flavor'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='instance',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='user_management.Project'),
        ),
        migrations.CreateModel(
            name='OverlayNetwork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openstack_id', models.CharField(blank=True, max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='overlaysubnet',
            name='network',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='subnets', to='fabric.OverlayNetwork'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='instance',
            name='network',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='fabric.OverlayNetwork'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='instance',
            name='image',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='fabric.Image'),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('openstack_id', models.CharField(blank=True, max_length=40, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ZoneComputesMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compute', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='zone_mapping', to='fabric.Compute')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='computes_mapping', to='fabric.Zone')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='zonecomputesmapping',
            unique_together=set([('zone', 'compute')]),
        ),
        migrations.CreateModel(
            name='NTPSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[(b'queued', b'queued'), (b'active', b'active'), (b'internal error', b'internal error')], default=b'queued', max_length=64)),
                ('connection_status', models.CharField(choices=[(b'up', b'up'), (b'error', b'error'), (b'not connected', b'not connected')], default=b'not connected', max_length=64)),
                ('last_test', models.DateTimeField(null=True)),
                ('last_test_stratum', models.IntegerField(null=True)),
            ],
        ),
    ]
